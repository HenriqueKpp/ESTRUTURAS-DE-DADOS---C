#include <stdlib.h>
#include <stdio.h>

typedef struct Tarefa{
int id;
char descricao[100];
int prioridade; // 1 = alta, 2 = média, 3 = baixa
struct Tarefa *anterior;
struct Tarefa *proximo;
}Tarefa;

typedef struct{
Tarefa *inicio;
}Lista;



 void Criarlista(Lista *lista){
lista->inicio = (Tarefa*)malloc(sizeof(Tarefa));
lista->inicio->anterior= NULL;
lista->inicio->proximo = NULL;
printf("\nID DO PRIMEIRO NO:");
scanf("%d",&lista->inicio->id);
printf("\nDESCRIÇÃO DO PRIMEIRO NO:");
scanf("%s",&lista->inicio->descricao);
printf("\nPRIORIDADE DO PRIMEIRO NO (1,2,3):");
scanf("%d",&lista->inicio->prioridade);
}



void NovoNoFinal(Lista *lista){

Tarefa *novo = (Tarefa*)malloc(sizeof(Tarefa));

novo->anterior = NULL;
novo->proximo = NULL;
printf("\nID DA NOVA TAREFA :");
scanf("%d",&novo->id);
printf("\nDESCRIÇÃO DA NOVA TAREFA:");
scanf("%s",&novo->descricao);
printf("\nPRIORIDADE DA NOVA TAREFA (1,2,3):");
scanf("%d",&novo->prioridade);

Tarefa *aux;
aux = lista->inicio;
while(aux->proximo != NULL){
aux = aux->proximo;
}
novo->anterior = aux;
aux->proximo =  novo;

}




void ImprimirListaInicio(Lista *lista){
Tarefa *aux;
aux = lista->inicio;
int i = 1;
printf("\n\n********LISTA DE TAREFAS*********\n ");
while(aux != NULL){
printf("\n%d- id:%d  descricao:""%s""   prioridade: %d\n",i,aux->id, aux->descricao, aux->prioridade);
i++;
aux = aux->proximo;
}
}



void NovoNoInicio(Lista *lista){

int valor;
Tarefa *novo = (Tarefa*)malloc(sizeof(Tarefa));

novo->anterior = NULL;
novo->proximo = NULL;
printf("\nID DA NOVA TAREFA NO:");
scanf("%d",&novo->id);
printf("\nDESCRIÇÃO DA NOVA TAREFA NO:");
scanf("%s",&novo->descricao);
printf("\nPRIORIDADE DA PRIMEIRA TAREFA (1,2,3):");
scanf("%d",&novo->prioridade);

Tarefa *aux=  lista->inicio;
lista->inicio = novo;
lista->inicio->proximo = aux;
lista->inicio->proximo->anterior = lista->inicio;
}





void ImprimirListaFinal(Lista *lista){
int i = 1;
Tarefa *aux;
aux = lista->inicio;
while(aux->proximo != NULL){
aux = aux->proximo;
i++;
}
printf("\n\n*********LISTA REVERSA DE TAREFAS********\n");
while(aux != NULL){
printf("\n%d- id:%d  descricao:\"%s\"   prioridade: %d\n",i,aux->id, aux->descricao, aux->prioridade);
i--;
aux = aux->anterior;
}
}



//TERMINANDO ***********
//void InserirNoMeio(Lista *lista){
//int posicao;
//int quantidade =0;
//printf("\n\nEM QUAL POSICAO DE SEJA INSERIR?\n ");
//scanf("%d\n\n",&posicao);
//Tarefa *novo = (Tarefa*)malloc(sizeof(Tarefa));
//Tarefa *aux = lista->inicio;
//do{
//if(aux != NULL)
//quantidade++;
//aux = aux->proximo;
//} while(aux!= NULL);
//if(posicao == 1){

//}
//if(posicao == quantidade){

//}

//}



int main(){
Lista *lista = (Lista*)malloc(sizeof(Lista));
lista->inicio = NULL;
Criarlista(lista);
int ope;
do{

printf("\n\nOPERACOES: 1- INSERIR FINAL\t 2- INSERIR INICIO\t 3-IMPRMIR LISTA PELO INICIO\t 4-IMPRIMIR PELO FINAL\n \t5- INSERIR NO MEIO \t 10- FINALIZAR PROGRAMA\n\n");
scanf("%d",&ope);

switch(ope)
{
case 1:
   NovoNoFinal(lista);
    break;
case 2:
    NovoNoInicio(lista);
break;

case 3:
    ImprimirListaInicio(lista);
break;

case 4:
    ImprimirListaFinal(lista);
break;

//case 5: 
    //TERMINANDO******
   // InserirNoMeio(lista);
    //break;

default:
printf("\n******Valor invalido!******\n");
    break;

}

}while(ope!= 10);

    return 0;
}
